"0","#---- construct network (set vertices, edges)"
"0",""
"0","contacts <- read_csv('contact_network.csv')"
"2","Parsed with column specification:
cols(
  id = [32mcol_double()[39m,
  inmate_id = [32mcol_double()[39m,
  sponsor_id = [32mcol_double()[39m,
  status = [31mcol_character()[39m,
  created_at = [34mcol_datetime(format = """")[39m,
  updated_at = [34mcol_datetime(format = """")[39m,
  sponsor_block = [32mcol_double()[39m,
  admin_block = [32mcol_double()[39m,
  latest_message_id = [32mcol_double()[39m,
  pan_contact_id = [33mcol_logical()[39m,
  display_email = [33mcol_logical()[39m,
  display_phone_number = [33mcol_logical()[39m
)
"
"2","213719 parsing failures.
 row                  col           expected       actual                  file
1646 display_phone_number 1/0/T/F/TRUE/FALSE 260-316-2717 'contact_network.csv'
1650 display_phone_number 1/0/T/F/TRUE/FALSE 260-316-0523 'contact_network.csv'
1767 display_phone_number 1/0/T/F/TRUE/FALSE 260-577-0397 'contact_network.csv'
1850 display_phone_number 1/0/T/F/TRUE/FALSE 260-316-7386 'contact_network.csv'
1926 display_phone_number 1/0/T/F/TRUE/FALSE 260-243-9914 'contact_network.csv'
.... .................... .................. ............ .....................
See problems(...) for more details.
"
"0","contacts_for_igraph <- contacts %>%"
"0","  filter(status == 'ACTIVE') %>%"
"0","  left_join(edovo_user_data, by= c(""inmate_id""= ""id"")) %>%"
"0","  group_by(facility_id)  %>% "
"0","  filter(n() > 5000) %>% #bigger facilities for now"
"0","  select(inmate_id, sponsor_id) %>%"
"0","  group_split(.keep=F)"
"2","Adding missing grouping variables: `facility_id`
"
"0","contact_graphs <-map(contacts_for_igraph, function(x) igraph::graph_from_data_frame(x))"
"2","In `d' `NA' elements were replaced with string ""NA"""
"2","In `d' `NA' elements were replaced with string ""NA"""
"2","In `d' `NA' elements were replaced with string ""NA"""
"2","In `d' `NA' elements were replaced with string ""NA"""
"2","In `d' `NA' elements were replaced with string ""NA"""
"0"," "
"0",""
"0","## ------------------------------------------------------------------------"
"0","sna_g <- igraph::get.adjacency(contact_graphs[[3]], sparse=FALSE) %>%"
"0","  network::as.network.matrix()"
"0",""
"0","# this detaching is a necessary step since the two packages have some same function names"
"0","# R is often confuesed"
"0","detach('package:igraph')"
"0","library(sna)"
"2","Loading required package: statnet.common
"
"2","
Attaching package: ‘statnet.common’

"
"2","The following object is masked from ‘package:base’:

    order

"
"2","Loading required package: network
"
"2","network: Classes for Relational Data
Version 1.16.0 created on 2019-11-30.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of California -- Los Angeles
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
                    Skye Bender-deMoll, University of Washington
 For citation information, type citation(""network"").
 Type help(""network-package"") to get started.

"
"2","sna: Tools for Social Network Analysis
Version 2.5 created on 2019-12-09.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation(""sna"").
 Type help(package=""sna"") to get started.

"
"2","
Attaching package: ‘sna’

"
"2","The following object is masked from ‘package:bit’:

    nties

"
"0","library(network)"
"0",""
"0","# Compute centralities based on 'network' package"
"0","# Calculate in-degree centrality"
"0","#degree(sna_g, cmode = 'indegree')"
"0","# Store the information"
"0","centralities <- data.frame('node_name' = as.character(network.vertex.names(sna_g)),"
"0","                           'degree' = sna::degree(sna_g))"
"0",""
"0","# Calculate eigenvector centrality and store it in the data.frame called 'centralities'"
"0","centralities$eigen <- igraph::eigen_centrality(contact_graphs[[3]])$vector"
"0",""
"0","# Calculate Burt's network constraint and store it in the data.frame called 'centralities'"
"0","# using 'igraph' because 'sna' doesn't have the function"
"0","centralities$netconstraint <- igraph::constraint(contact_graphs[[3]])"
"0",""
"0","# Calculate authority and store it in the data.frame called 'centralities'"
"0","# using 'igraph' because 'sna' doesn't have the function"
"0","# 'igraph::' allows calling for any igraph function without loading the package"
"0","centralities$authority <- igraph::authority_score(contact_graphs[[3]], scale = TRUE)$`vector`"
"0",""
"0","# Calculate hub and store it in the data.frame called 'centralities'"
"0","# using 'igraph' because 'sna' doesn't have the function"
"0","centralities$hub <- igraph::hub_score(contact_graphs[[3]], scale = TRUE)$`vector`"
"0",""
"0","#--- rejoin with edovo_user_data"
"0","centralities <- centralities %>% "
"0","  mutate(node_name = as.numeric(node_name)) %>%"
"0","  left_join(edovo_user_data, by=c('node_name'= 'id'))"
"0",""
"0",""
"0",""
